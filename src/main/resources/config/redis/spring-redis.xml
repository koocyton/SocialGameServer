<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd">

    <!-- 载入redis.properties,这里要特别注意，如果有多个properties文件，必须用逗号分开，不能写成两个 <context:property-placeholder/> -->
    <!-- <context:property-placeholder location="classpath:config/redis/develop.properties" /> -->
    <context:property-placeholder location="classpath*:config/tomcat.webapp.root.properties" />

    <!-- 配置JedisPoolConfig相关参数 -->
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxTotal" value="${spring.redis.pool.maxTotal}" />
        <property name="maxIdle" value="${spring.redis.pool.maxIdle}" />
        <property name="minIdle" value="${spring.redis.pool.minIdle}" />
        <property name="maxWaitMillis" value="${spring.redis.pool.maxWaitMillis}" />
        <!--
        <property name="testOnBorrow" value="${spring.redis.pool.testOnBorrow}" />
        <property name="testOnReturn" value="${spring.redis.pool.testOnReturn}" />
        //-->
    </bean>

    <!-- 配置redis服务器信息 -->
    <bean id="connectionFactory"
          class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="poolConfig" ref="poolConfig" />
        <property name="hostName" value="${spring.redis.host}" />
        <property name="port" value="${spring.redis.port}" />
        <property name="password" value="${spring.redis.password}" />
        <property name="database" value="${spring.redis.database}" />
        <property name="timeout" value="${spring.redis.timeout}" />
    </bean>

    <!-- 配置RedisTemplate -->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="connectionFactory" />
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
        </property>
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
            <!-- <bean class="com.doopp.gauss.api.utils.RedisValueSerialize" /> //-->
        </property>
        <property name="hashKeySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
        </property>
        <!-- 使用JacksonJsonRedisSerializer需要引入jar包：barchart-wrap-jackson-1.8.6-build001.jar -->
        <!-- JacksonJsonRedisSerializer 需要一个有参的构造函数，因此需要配置constructor-arg -->
        <!-- <property name="hashValueSerializer">
            <bean class="org.springframework.data.redis.serializer.JacksonJsonRedisSerializer">
                <constructor-arg type="java.lang.Class" value="java.lang.Object" />
            </bean>
        </property>
        //-->
    </bean>

    <!-- 配置redis连接池 -->
    <bean class="redis.clients.jedis.JedisPool">
        <constructor-arg ref="poolConfig" />
        <constructor-arg value="${spring.redis.host}" />
        <constructor-arg type="int" value="${spring.redis.port}" />
        <constructor-arg type="int" value="${spring.redis.timeout}" />
        <constructor-arg type="java.lang.String" value="${spring.redis.password}" />
        <constructor-arg type="int" value="${spring.redis.database}" />
    </bean>

</beans>