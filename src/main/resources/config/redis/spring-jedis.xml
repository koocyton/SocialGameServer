<?xml version="1.0" encoding="UTF-8"?>
<beans  xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:context="http://www.springframework.org/schema/context"
        xsi:schemaLocation="
            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd">

    <!-- 开启注解驱动 -->
    <context:annotation-config />

    <!-- 引入属性文件 -->
    <context:property-placeholder location="classpath:config/tomcat.webapp.root.properties" ignore-unresolvable="true" />

    <!-- 配置redis数据库连接池 -->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxTotal" value="${redis.pool.maxTotal}" />
        <property name="maxIdle" value="${redis.pool.maxIdle}" />
        <property name="minIdle" value="${redis.pool.minIdle}" />
        <property name="maxWaitMillis" value="${redis.pool.maxWaitMillis}" />
        <property name="lifo" value="${redis.pool.lifo}" />
        <property name="testOnBorrow" value="${redis.pool.testOnBorrow}" />
    </bean>

    <!-- 配置redis服务器信息 -->
    <bean id="connectionFactory"
          class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="poolConfig" ref="jedisPoolConfig" />
        <property name="hostName" value="${redis.session.host}" />
        <property name="port" value="${redis.session.port}" />
        <property name="password" value="${redis.session.password}" />
        <property name="database" value="${redis.session.database}" />
        <property name="timeout" value="${redis.session.timeout}" />
    </bean>

    <!-- 配置RedisTemplate -->
    <bean id="redisSessionTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="connectionFactory" />
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
        </property>
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
            <!-- <bean class="com.doopp.gauss.api.utils.RedisValueSerialize" /> //-->
        </property>
        <property name="hashKeySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
        </property>
        <!-- 使用JacksonJsonRedisSerializer需要引入jar包：barchart-wrap-jackson-1.8.6-build001.jar -->
        <!-- JacksonJsonRedisSerializer 需要一个有参的构造函数，因此需要配置constructor-arg -->
        <!-- <property name="hashValueSerializer">
            <bean class="org.springframework.data.redis.serializer.JacksonJsonRedisSerializer">
                <constructor-arg type="java.lang.Class" value="java.lang.Object" />
            </bean>
        </property>
        //-->
    </bean>

    <!-- 配置redis连接池 -->
    <!--
    <bean class="redis.clients.jedis.JedisPool">
        <constructor-arg ref="jedisPoolConfig" />
        <constructor-arg value="${redis.session.host}" />
        <constructor-arg type="int" value="${redis.session.port}" />
        <constructor-arg type="int" value="${redis.session.timeout}" />
        <constructor-arg type="java.lang.String" value="${redis.session.password}" />
        <constructor-arg type="int" value="${redis.session.database}" />
    </bean>
    -->

    <!-- room id => room info -->
    <bean id="roomJedis" class="redis.clients.jedis.ShardedJedisPool">
        <constructor-arg index="0" ref="jedisPoolConfig" />
        <constructor-arg index="1">
            <list>
                <bean class="redis.clients.jedis.JedisShardInfo">
                    <constructor-arg index="0" value="${redis.room.uri.0}" />
                </bean>
            </list>
        </constructor-arg>
    </bean>

    <!-- user id => room id -->
    <bean id="roomIndexJedis" class="redis.clients.jedis.ShardedJedisPool">
        <constructor-arg index="0" ref="jedisPoolConfig" />
        <constructor-arg index="1">
            <list>
                <bean class="redis.clients.jedis.JedisShardInfo">
                    <constructor-arg index="0" value="${redis.room-index.uri.1}" />
                </bean>
            </list>
        </constructor-arg>
    </bean>

    <!-- session id => user info -->
    <!--
    <bean id="sessionJedis" class="redis.clients.jedis.ShardedJedisPool">
        <constructor-arg index="0" ref="jedisPoolConfig" />
        <constructor-arg index="1">
            <list>
                <bean class="redis.clients.jedis.JedisShardInfo">
                    <constructor-arg index="0" value="${redis.session.uri.2}" />
                </bean>
            </list>
        </constructor-arg>
    </bean>
    // -->

    <!-- access-token => user info -->
    <bean id="accessTokenJedis" class="redis.clients.jedis.ShardedJedisPool">
        <constructor-arg index="0" ref="jedisPoolConfig" />
        <constructor-arg index="1">
            <list>
                <bean class="redis.clients.jedis.JedisShardInfo">
                    <constructor-arg index="0" value="${redis.access-token-session.uri.3}" />
                </bean>
            </list>
        </constructor-arg>
    </bean>

</beans>